import _ , { toNumber } from 'lodash'
import { Create<%= modelName %>Dto } from '@dtos/<%= modelName.toLowerCase() %>.dto';
import { HttpException } from '@exceptions/HttpException';
import <%= modelName %>Model from '@models/<%= modelName.toLowerCase() %>.model';
import { <%= modelName %> } from '@/interfaces/<%= modelName.toLowerCase() %>.interface';

class <%= modelName %>Service {
  public <%= modelName.toLowerCase() %> = <%= modelName %>Model;

  public async findAll(page:string, limit:string, query: any): Promise<{<%= modelName.toLowerCase() %>s: <%= modelName %>[], total: number, page: string}> {

    let queryData = {}

    const <%= modelName.toLowerCase() %>s: <%= modelName %>[] = await this.<%= modelName.toLowerCase() %>.find(queryData)
    .limit(toNumber(limit))
    .skip((toNumber(page) - 1) * toNumber(limit));

    const total = await this.<%= modelName.toLowerCase() %>.countDocuments(queryData)
    return { <%= modelName.toLowerCase() %>s, total, page };
  }

  public async findById(<%= modelName.toLowerCase() %>Id: string): Promise<<%= modelName %>> {
    const find<%= modelName %>: <%= modelName %> = await this.<%= modelName.toLowerCase() %>.findOne({ _id: <%= modelName.toLowerCase() %>Id });
    if (!find<%= modelName %>) throw new HttpException(409, "You're not <%= modelName.toLowerCase() %>");
    return find<%= modelName %>;
  }

  public async create(<%= modelName.toLowerCase() %>Data: Create<%= modelName %>Dto): Promise<any> {
    const create<%= modelName %>Data: <%= modelName %> = await this.<%= modelName.toLowerCase() %>.create({ ...<%= modelName.toLowerCase() %>Data });
    return create<%= modelName %>Data;
  }

  public async update(<%= modelName.toLowerCase() %>Id: string, <%= modelName.toLowerCase() %>Data: Create<%= modelName %>Dto): Promise<<%= modelName %>> {
    const update<%= modelName %>ById: <%= modelName %> = await this.<%= modelName.toLowerCase() %>.findByIdAndUpdate(<%= modelName.toLowerCase() %>Id, <%= modelName.toLowerCase() %>Data, { new: true });
    if (!update<%= modelName %>ById) throw new HttpException(409, "You're not <%= modelName.toLowerCase() %>");
    return update<%= modelName %>ById;
  }

  public async delete(<%= modelName.toLowerCase() %>Id: string): Promise<<%= modelName %>> {
    const delete<%= modelName %>ById: <%= modelName %> = await this.<%= modelName.toLowerCase() %>.findByIdAndDelete(<%= modelName.toLowerCase() %>Id);
    if (!delete<%= modelName %>ById) throw new HttpException(409, "You're not <%= modelName.toLowerCase() %>");
    return delete<%= modelName %>ById;
  }

}

export default <%= modelName %>Service;
